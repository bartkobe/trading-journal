generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Optional: Use direct connection for migrations if DATABASE_URL_DIRECT is set
  // This allows using pooled connection (port 6543) for runtime but direct connection (port 5432) for migrations
  directUrl = env("DATABASE_URL_DIRECT")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trades    Trade[]

  @@map("users")
}

model Trade {
  id                  String            @id @default(cuid())
  userId              String
  symbol              String
  assetType           AssetType
  currency            String            @default("USD")
  entryDate           DateTime
  entryPrice          Float
  exitDate            DateTime
  exitPrice           Float
  quantity            Float
  direction           Direction
  setupType           String?
  strategyName        String?
  stopLoss            Float?
  takeProfit          Float?
  riskRewardRatio     Float?
  actualRiskReward    Float?
  fees                Float?            @default(0)
  timeOfDay           TimeOfDay?
  marketConditions    MarketConditions?
  emotionalStateEntry String?
  emotionalStateExit  String?
  notes               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  screenshots         Screenshot[]
  tags                TradeTag[]
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([assetType])
  @@index([entryDate])
  @@index([strategyName])
  @@map("trades")
}

model Screenshot {
  id         String   @id @default(cuid())
  tradeId    String
  url        String
  filename   String
  fileSize   Int?
  mimeType   String?
  uploadedAt DateTime @default(now())
  trade      Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@index([tradeId])
  @@map("screenshots")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  trades    TradeTag[]

  @@map("tags")
}

model TradeTag {
  id        String   @id @default(cuid())
  tradeId   String
  tagId     String
  createdAt DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@unique([tradeId, tagId])
  @@index([tradeId])
  @@index([tagId])
  @@map("trade_tags")
}

enum AssetType {
  STOCK
  FOREX
  CRYPTO
  OPTIONS
}

enum Direction {
  LONG
  SHORT
}

enum TimeOfDay {
  PRE_MARKET
  MARKET_OPEN
  MID_DAY
  MARKET_CLOSE
  AFTER_HOURS
}

enum MarketConditions {
  TRENDING
  RANGING
  VOLATILE
  CALM
}
